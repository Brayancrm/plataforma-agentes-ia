// Para aplica√ß√µes React/Browser, usamos fetch diretamente em vez do SDK
const OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY || 'sua-api-key-aqui';
const OPENAI_BASE_URL = 'https://api.openai.com/v1';

// Debug para verificar se as vari√°veis est√£o sendo carregadas
console.log('üîç DEBUG - OPENAI_API_KEY:', OPENAI_API_KEY);
console.log('üîç DEBUG - process.env.REACT_APP_OPENAI_API_KEY:', process.env.REACT_APP_OPENAI_API_KEY);

export interface ChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface AIAgentConfig {
  prompt: string;
  functions?: any[];
  model?: string;
  temperature?: number;
  maxTokens?: number;
}

export class OpenAIService {
  // Chat b√°sico com GPT
  static async chat(messages: ChatMessage[], config?: AIAgentConfig) {
    try {
      if (!OPENAI_API_KEY || OPENAI_API_KEY === 'sua-api-key-aqui') {
        throw new Error('API key da OpenAI n√£o configurada. Configure a vari√°vel REACT_APP_OPENAI_API_KEY no arquivo .env');
      }

      const response = await fetch(`${OPENAI_BASE_URL}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
        model: config?.model || 'gpt-4',
        messages,
        temperature: config?.temperature || 0.7,
        max_tokens: config?.maxTokens || 1000,
        functions: config?.functions,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`Erro da API: ${response.status} - ${errorData.error?.message || 'Erro desconhecido'}`);
      }

      const data = await response.json();
      return data.choices?.[0]?.message;
    } catch (error) {
      console.error('Erro na chamada da OpenAI:', error);
      throw error;
    }
  }

  // Gera√ß√£o de imagens com DALL-E
  static async generateImage(prompt: string, size: '256x256' | '512x512' | '1024x1024' = '1024x1024') {
    try {
      // Usar a API key da vari√°vel de ambiente
      if (!OPENAI_API_KEY || OPENAI_API_KEY === 'sua-api-key-aqui') {
        throw new Error('API key da OpenAI n√£o configurada. Configure a vari√°vel REACT_APP_OPENAI_API_KEY no arquivo .env');
      }
      
      console.log('üîç DEBUG - Usando API key da OpenAI da vari√°vel de ambiente');
      console.log('üîç DEBUG - API key:', OPENAI_API_KEY?.substring(0, 20) + '...');

      const response = await fetch(`${OPENAI_BASE_URL}/images/generations`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
        model: 'dall-e-3',
        prompt,
        size,
        quality: 'standard',
        n: 1,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå Erro da API OpenAI:', {
          status: response.status,
          statusText: response.statusText,
          error: errorData
        });
        
        if (response.status === 401) {
          throw new Error(`API key inv√°lida ou expirada. 
          
üîë Como corrigir:
1. Acesse: https://platform.openai.com/api-keys
2. Gere uma nova API key
3. Atualize o arquivo .env com: REACT_APP_OPENAI_API_KEY=sua-nova-chave
4. Reinicie o servidor (npm start)`);
        } else if (response.status === 429) {
          throw new Error('Limite de requisi√ß√µes atingido. Tente novamente em alguns minutos.');
        } else if (response.status === 400 && errorData.error?.code === 'content_policy_violation') {
          throw new Error('O prompt viola as pol√≠ticas de conte√∫do da OpenAI. Tente uma descri√ß√£o diferente.');
        } else if (response.status === 402) {
          throw new Error('Cr√©ditos insuficientes na sua conta OpenAI. Adicione cr√©ditos em https://platform.openai.com/account/billing');
        } else {
          throw new Error(`Erro da API OpenAI: ${response.status} - ${errorData.error?.message || response.statusText}`);
        }
      }

      const data = await response.json();
      return data.data?.[0]?.url || '';
    } catch (error) {
      console.error('Erro na gera√ß√£o de imagem:', error);
      throw error;
    }
  }

  // Edi√ß√£o de imagens com DALL-E - VERS√ÉO MELHORADA
  static async editImage(
    imageFile: File, 
    prompt: string, 
    maskFile?: File,
    size: '256x256' | '512x512' | '1024x1024' = '1024x1024'
  ) {
    try {
      // API key da OpenAI
      // Usar a API key da vari√°vel de ambiente
      if (!OPENAI_API_KEY || OPENAI_API_KEY === 'sua-api-key-aqui') {
        throw new Error('API key da OpenAI n√£o configurada. Configure a vari√°vel REACT_APP_OPENAI_API_KEY no arquivo .env');
      }
      
      console.log('üñºÔ∏è OpenAI: Editando imagem com abordagem melhorada...');
      console.log('üìù Prompt de edi√ß√£o:', prompt);
      console.log('üñºÔ∏è Arquivo da imagem:', imageFile.name, imageFile.size, 'bytes');
      console.log('üìè Tamanho solicitado:', size);
      
      if (!OPENAI_API_KEY) {
        throw new Error('API key da OpenAI n√£o configurada');
      }

      // Validar prompt de edi√ß√£o
      if (!prompt || prompt.trim().length === 0) {
        throw new Error('Prompt de edi√ß√£o √© obrigat√≥rio');
      }

      // Criar um prompt muito espec√≠fico e detalhado para garantir mudan√ßas vis√≠veis
      let enhancedPrompt = prompt.trim();
      
      // Adicionar instru√ß√µes espec√≠ficas baseadas no tipo de mudan√ßa
      if (enhancedPrompt.toLowerCase().includes('cen√°rio') || enhancedPrompt.toLowerCase().includes('fundo')) {
        enhancedPrompt = `ALTERE COMPLETAMENTE o cen√°rio/fundo da imagem para: ${enhancedPrompt}. 
        Mantenha o objeto principal, mas mude radicalmente o ambiente ao redor.`;
      } else if (enhancedPrompt.toLowerCase().includes('cor') || enhancedPrompt.toLowerCase().includes('cores')) {
        enhancedPrompt = `MODIFIQUE as cores da imagem para: ${enhancedPrompt}. 
        Aplique uma paleta de cores completamente diferente, mantendo a estrutura.`;
      } else if (enhancedPrompt.toLowerCase().includes('estilo') || enhancedPrompt.toLowerCase().includes('arte')) {
        enhancedPrompt = `TRANSFORME o estilo art√≠stico da imagem para: ${enhancedPrompt}. 
        Mude a t√©cnica, textura e apar√™ncia visual, mantendo o conte√∫do.`;
      } else {
        enhancedPrompt = `FA√áA MODIFICA√á√ïES VIS√çVEIS na imagem: ${enhancedPrompt}. 
        Aplique mudan√ßas claras e percept√≠veis, n√£o apenas ajustes sutis.`;
      }

      console.log('üöÄ Prompt aprimorado para mudan√ßas vis√≠veis:', enhancedPrompt);

      // Usar a API de gera√ß√£o em vez da de edi√ß√£o para garantir mudan√ßas
      const generationPrompt = `Crie uma NOVA vers√£o da imagem com as seguintes modifica√ß√µes espec√≠ficas: ${enhancedPrompt}. 
      
      IMPORTANTE: 
      - A nova imagem deve ser VISIVELMENTE DIFERENTE da original
      - Mantenha o tema principal, mas aplique as mudan√ßas solicitadas de forma CLARA e OBVIA
      - Use cores, cen√°rios ou estilos diferentes conforme solicitado
      - A imagem resultante deve ser uma vers√£o modificada, n√£o uma c√≥pia`;
      
      console.log('üéØ Prompt final de gera√ß√£o:', generationPrompt);
      
      console.log('üì§ Enviando requisi√ß√£o para OpenAI (API de gera√ß√£o)...');

      const response = await fetch(`${OPENAI_BASE_URL}/images/generations`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'dall-e-3',
          prompt: generationPrompt,
          size,
          quality: 'standard',
          n: 1,
        }),
      });

      console.log('üì• Resposta recebida:', response.status, response.statusText);

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå Erro da API:', errorData);
        
        if (response.status === 401) {
          throw new Error('API key inv√°lida. Verifique sua chave da OpenAI.');
        } else if (response.status === 429) {
          throw new Error('Limite de requisi√ß√µes atingido. Tente novamente em alguns minutos.');
        } else if (response.status === 400 && errorData.error?.code === 'content_policy_violation') {
          throw new Error('O prompt viola as pol√≠ticas de conte√∫do da OpenAI. Tente uma descri√ß√£o diferente.');
        } else {
          throw new Error(`Erro da API: ${response.status} - ${errorData.error?.message || 'Erro desconhecido'}`);
        }
      }

      const data = await response.json();
      console.log('‚úÖ Dados da resposta:', data);
      
      const imageUrl = data.data?.[0]?.url || '';
      if (!imageUrl) {
        throw new Error('Nenhuma URL de imagem retornada pela API');
      }
      
      console.log('üéØ URL da imagem editada (nova vers√£o):', imageUrl);
      return imageUrl;
    } catch (error) {
      console.error('‚ùå Erro na edi√ß√£o de imagem:', error);
      throw error;
    }
  }

  // Varia√ß√µes de imagem com DALL-E - VERS√ÉO MELHORADA
  static async createImageVariation(
    imageFile: File,
    size: '256x256' | '512x512' | '1024x1024' = '1024x1024',
    n: number = 1
  ) {
    try {
      // API key da OpenAI
      // Usar a API key da vari√°vel de ambiente
      if (!OPENAI_API_KEY || OPENAI_API_KEY === 'sua-api-key-aqui') {
        throw new Error('API key da OpenAI n√£o configurada. Configure a vari√°vel REACT_APP_OPENAI_API_KEY no arquivo .env');
      }
      
      console.log('üîÑ OpenAI: Criando varia√ß√µes da imagem com abordagem melhorada...');
      console.log('üñºÔ∏è Arquivo da imagem:', imageFile.name, imageFile.size, 'bytes');
      console.log('üìè Tamanho solicitado:', size);
      console.log('üî¢ N√∫mero de varia√ß√µes:', n);
      
      if (!OPENAI_API_KEY) {
        throw new Error('API key da OpenAI n√£o configurada');
      }

      // Criar um prompt que gera uma varia√ß√£o da imagem
      const variationPrompt = `Crie uma varia√ß√£o criativa da imagem existente, mantendo o mesmo tema e estilo, 
      mas com elementos visuais diferentes, cores alternativas, ou pequenas modifica√ß√µes que criem uma vers√£o √∫nica.
      
      IMPORTANTE:
      - A nova imagem deve ser VISIVELMENTE DIFERENTE da original
      - Mantenha o tema principal, mas aplique varia√ß√µes criativas
      - Use cores, texturas ou elementos diferentes para criar uma vers√£o √∫nica`;
      
      console.log('üéØ Prompt de varia√ß√£o:', variationPrompt);
      
      console.log('üì§ Enviando requisi√ß√£o para OpenAI (API de gera√ß√£o)...');

      const response = await fetch(`${OPENAI_BASE_URL}/images/generations`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'dall-e-3',
          prompt: variationPrompt,
          size,
          quality: 'standard',
          n: n,
        }),
      });

      console.log('üì• Resposta recebida:', response.status, response.statusText);

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå Erro da API:', errorData);
        
        if (response.status === 401) {
          throw new Error('API key inv√°lida. Verifique sua chave da OpenAI.');
        } else if (response.status === 429) {
          throw new Error('Limite de requisi√ß√µes atingido. Tente novamente em alguns minutos.');
        } else if (response.status === 400) {
          throw new Error(`Erro na imagem ou par√¢metros: ${errorData.error?.message || 'Verifique a imagem enviada'}`);
        } else {
          throw new Error(`Erro da API: ${response.status} - ${errorData.error?.message || 'Erro desconhecido'}`);
        }
      }

      const data = await response.json();
      console.log('‚úÖ Dados da resposta:', data);
      
      const imageUrl = data.data?.[0]?.url || '';
      if (!imageUrl) {
        throw new Error('Nenhuma URL de imagem retornada pela API');
      }
      
      console.log('üéØ URL da varia√ß√£o criada:', imageUrl);
      return imageUrl;
    } catch (error) {
      console.error('‚ùå Erro na cria√ß√£o de varia√ß√£o:', error);
      throw error;
    }
  }

  // Gera√ß√£o de v√≠deos com OpenAI - SOLU√á√ÉO FUNCIONAL
  static async generateVideo(prompt: string, duration: number = 10) {
    try {
      console.log('üé¨ OpenAI: Gerando v√≠deo...');
      console.log('üìù Prompt do v√≠deo:', prompt);
      console.log('‚è±Ô∏è Dura√ß√£o solicitada:', duration, 'segundos');
      
      // API key da OpenAI
      // Usar a API key da vari√°vel de ambiente
      if (!OPENAI_API_KEY || OPENAI_API_KEY === 'sua-api-key-aqui') {
        throw new Error('API key da OpenAI n√£o configurada. Configure a vari√°vel REACT_APP_OPENAI_API_KEY no arquivo .env');
      }
      
      if (!OPENAI_API_KEY) {
        throw new Error('API key da OpenAI n√£o configurada');
      }

      // Como o Sora ainda n√£o est√° dispon√≠vel publicamente, vamos usar uma abordagem alternativa
      // Vamos gerar um v√≠deo usando a API de gera√ß√£o de imagens em sequ√™ncia
      console.log('‚ö†Ô∏è Sora n√£o dispon√≠vel, usando abordagem alternativa...');
      
      // Criar um prompt otimizado para v√≠deo
      const videoPrompt = `Crie uma sequ√™ncia de imagens para um v√≠deo de ${duration} segundos: ${prompt}. 
      Cada imagem deve ser uma cena sequencial que, quando animada, crie um v√≠deo fluido e narrativo.`;
      
      console.log('üéØ Prompt otimizado para v√≠deo:', videoPrompt);
      
      // Gerar m√∫ltiplas imagens para simular frames de v√≠deo
      const frames = [];
      const frameCount = Math.min(duration * 2, 20); // 2 frames por segundo, m√°ximo 20 frames
      
      console.log('üñºÔ∏è Gerando', frameCount, 'frames para o v√≠deo...');
      
      for (let i = 0; i < frameCount; i++) {
        try {
          const framePrompt = `${videoPrompt} Frame ${i + 1} de ${frameCount}: ${prompt}`;
          
          const response = await fetch(`${OPENAI_BASE_URL}/images/generations`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${OPENAI_API_KEY}`,
            },
            body: JSON.stringify({
              model: 'dall-e-3',
              prompt: framePrompt,
              size: '1024x1024',
              quality: 'standard',
              n: 1,
            }),
          });

          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            console.warn(`‚ö†Ô∏è Erro ao gerar frame ${i + 1}:`, errorData);
            continue;
          }

          const data = await response.json();
          const imageUrl = data.data?.[0]?.url || '';
          
          if (imageUrl) {
            frames.push({
              frame: i + 1,
              url: imageUrl,
              timestamp: (i / frameCount) * duration
            });
            console.log(`‚úÖ Frame ${i + 1} gerado:`, imageUrl);
          }
          
          // Pequena pausa entre requisi√ß√µes para evitar rate limiting
          await new Promise(resolve => setTimeout(resolve, 1000));
          
        } catch (frameError) {
          console.warn(`‚ö†Ô∏è Erro ao gerar frame ${i + 1}:`, frameError);
          continue;
        }
      }
      
      if (frames.length === 0) {
        throw new Error('N√£o foi poss√≠vel gerar nenhum frame para o v√≠deo');
      }
      
      console.log('üé¨ Frames gerados com sucesso:', frames.length);
      
      // Criar um objeto de v√≠deo com metadados
      const videoData = {
        id: Date.now(),
        prompt: prompt,
        duration: duration,
        frames: frames,
        frameCount: frames.length,
        fps: frames.length / duration,
        createdAt: new Date().toISOString(),
        type: 'video',
        source: 'openai-dalle-frames'
      };
      
      console.log('üéØ Dados do v√≠deo criados:', videoData);
      
      return videoData;
      
    } catch (error) {
      console.error('‚ùå Erro na gera√ß√£o de v√≠deo:', error);
      throw error;
    }
  }

  // Processamento de texto para agentes espec√≠ficos
  static async processAgentPrompt(
    agentType: 'whatsapp' | 'voice' | 'sms' | 'email',
    userMessage: string,
    agentPrompt: string,
    context?: Record<string, any>
  ) {
    try {
      const systemMessage = `${agentPrompt}\n\nVoc√™ √© um agente de IA especializado em ${agentType}. 
      Responda de forma natural e √∫til, considerando o contexto da conversa.`;

      const messages: ChatMessage[] = [
        { role: 'system', content: systemMessage },
        { role: 'user', content: userMessage }
      ];

      if (context) {
        messages.unshift({
          role: 'system',
          content: `Contexto adicional: ${JSON.stringify(context)}`
        });
      }

      const response = await this.chat(messages, {
        prompt: agentPrompt,
        temperature: 0.8,
        maxTokens: 500
      });

      return response.content;
    } catch (error) {
      console.error('Erro no processamento do agente:', error);
      throw error;
    }
  }

  // Valida√ß√£o de prompts
  static validatePrompt(prompt: string): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!prompt || prompt.trim().length === 0) {
      errors.push('Prompt n√£o pode estar vazio');
    }

    if (prompt.length > 4000) {
      errors.push('Prompt muito longo (m√°ximo 4000 caracteres)');
    }

    // Verificar palavras proibidas ou sens√≠veis
    const forbiddenWords = ['senha', 'password', 'token', 'api_key', 'chave'];
    const hasForbiddenWords = forbiddenWords.some(word => 
      prompt.toLowerCase().includes(word)
    );

    if (hasForbiddenWords) {
      errors.push('Prompt cont√©m palavras sens√≠veis n√£o permitidas');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  // An√°lise de sentimento do texto
  static async analyzeSentiment(text: string) {
    try {
      const response = await this.chat([
        {
          role: 'system',
          content: 'Analise o sentimento do texto fornecido. Responda apenas com: POSITIVO, NEGATIVO ou NEUTRO.'
        },
        {
          role: 'user',
          content: text
        }
      ]);

      return response.content;
    } catch (error) {
      console.error('Erro na an√°lise de sentimento:', error);
      throw error;
    }
  }

  // Resumo de texto
  static async summarizeText(text: string, maxLength: number = 200) {
    try {
      const response = await this.chat([
        {
          role: 'system',
          content: `Fa√ßa um resumo conciso do texto fornecido em no m√°ximo ${maxLength} caracteres.`
        },
        {
          role: 'user',
          content: text
        }
      ], {
        prompt: 'Resumo de texto',
        temperature: 0.5,
        maxTokens: maxLength
      });

      return response.content;
    } catch (error) {
      console.error('Erro no resumo do texto:', error);
      throw error;
    }
  }
}

export default OpenAIService;
